{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/EventEmitter.js","webpack:///./js/Component.js","webpack:///./js/ChartComponent.js","webpack:///./js/DynamicImage.js","webpack:///./js/WeatherComponent.js","webpack:///./js/config.js","webpack:///./js/JsonLoader.js","webpack:///./js/index.js","webpack:///./js/App.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EventEmitter","this","_events","type","lsn","push","args","Array","isArray","forEach","app","super","_app","initMembers","on","onAdded","start","_backgroundPositionX","_patternImageWidth","_canvas","document","getElementById","width","$","outerWidth","height","outerHeight","window","ev","_config","pattern","valid","drawChartPattern","then","img","ctx","getContext","_fillPattern","createPattern","dt","temperatures","drawLines","days","canvasWidth","Math","floor","length","temperature","maxTemperature","canvasHeight","thod","map","day","x","getLinePositionX","y","getLinePositionY","Promise","resolve","reject","_img","Image","src","onload","onerror","err","strokeStyle","lineWidth","font","padding","textAlign","temperatureSymbol","lineCap","smooth","fillChart","fillStyle","textColor","clearRect","lines","getLines","save","beginPath","setTransform","translate","cur","prev","moveTo","text","tw","measureText","pad","lineTo","stroke","strokeText","fillText","lastLine","pop","closePath","fill","restore","config","_size","drawBackground","fillRate","drawShape","canvas","emit","toDataURL","w","globalCompositeOperation","arc","PI","rate","fillRect","initWithDate","initWithWeather","unixTime","date","Date","Intl","DateTimeFormat","format","k","round","getDegreeCelsius","daily","timezone","append","each","index","elem","getTimeString","deg","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","class","weather","size","icon","initWithWindSpeed","data","windDegText","html","getWindDirection","wind_deg","windSpeed","wind_speed","humidity","min","temp","max","time","sunrise","toLocaleTimeString","eq","after","addClass","appendTo","waterDrop","classList","add","title","find","css","e","console","warn","atob","url","_url","END_POINT_URL","ajax","dataType","success","error","entryPoint","show","initWithArticle","_chart","_weatherComponent","API","lang","navigator","language","slice","toLowerCase","loader","initWithCharts","update","hide","log","assign","startMainLoop","requestAnimationFrame"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","class EventEmitter {\r\n    constructor() {\r\n        this._events = {};\r\n    }\r\n\r\n    on(type, lsn) {\r\n        if(!this._events[type]) {\r\n            this._events[type] = [];\r\n        }\r\n\r\n        this._events[type].push(lsn);\r\n\r\n        return this;\r\n    }\r\n\r\n    emit(type, ...args) {\r\n        \r\n        if(!this._events[type]) {\r\n            return;\r\n        }\r\n\r\n        if(!Array.isArray(this._events[type])) {\r\n            return;\r\n        }\r\n\r\n        const events = this._events[type];\r\n        events.forEach(lsn => lsn(...args));\r\n    }\r\n}\r\n\r\nexport {EventEmitter};","import {EventEmitter} from \"./EventEmitter.js\";\r\nimport App from \"./App.js\";\r\n\r\nclass Component extends EventEmitter {\r\n\r\n    /**\r\n     * @param {App} app \r\n     */\r\n    constructor(app) {\r\n        super();\r\n        this._app = app;\r\n        this.initMembers();\r\n    }\r\n\r\n    async initMembers() {\r\n        this.on(\"added\", (...args) => this.onAdded(...args));\r\n    }\r\n\r\n    onAdded() {\r\n        this.start();\r\n    }\r\n\r\n    start() {\r\n        \r\n    }\r\n\r\n    update() {\r\n\r\n    }\r\n}\r\n\r\nexport {Component};","import {\r\n    Component\r\n} from \"./Component.js\";\r\n\r\n/**\r\n * @author Uh jinseok\r\n */\r\nclass ChartComponent extends Component {\r\n    /**\r\n     * \r\n     * @param {App} app \r\n     */\r\n    constructor(app) {\r\n        super(app);\r\n    }\r\n\r\n    initMembers() {\r\n        super.initMembers();\r\n\r\n        this._backgroundPositionX = 0;\r\n        this._patternImageWidth = 1;\r\n\r\n        /**\r\n         * 차트를 직접 그리기 위해 캔버스를 선언합니다.\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        this._canvas = document.getElementById(\"main-canvas\");\r\n        this._canvas.width = $(\".temperature-field\").outerWidth();\r\n        this._canvas.height = $(\".temperature-field\").outerHeight();\r\n\r\n        // 화면 크기가 변할 때 캔버스의 사이즈도 변경합니다.\r\n        $(window).on(\"resize\", (ev) => {\r\n            this._canvas.width = $(\".temperature-field\").outerWidth();\r\n            this._canvas.height = $(\".temperature-field\").outerHeight();\r\n        });\r\n\r\n        // 초기화 코드로 설정값을 받아오고 스크롤링 필 패턴을 생성합니다.\r\n        this.on(\"ready\", (...args) => {\r\n            this._config = {...args[0]};\r\n\r\n            if(this._config.pattern.valid) {\r\n                this.drawChartPattern(this._config.pattern).then(img => {\r\n                    const ctx = this._canvas.getContext(\"2d\");\r\n                    this._fillPattern = ctx.createPattern(img, 'repeat');                       \r\n                });            \r\n            }\r\n\r\n            // 프레임 업데이트 메서드를 이벤트 콜백에 등록합니다.\r\n            this.on(\"update\", (dt) => {\r\n                const {temperatures} = this._config;\r\n                this.drawLines(temperatures, dt);            \r\n            });                 \r\n    \r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * 캔버스의 가로 축을 정확히 기온 배열의 최대값만큼 나눠 나란히 전개합니다.\r\n     * \r\n     * @param {Number} days \r\n     */\r\n    getLinePositionX(days) {\r\n        const canvasWidth = this._canvas.width;\r\n        const thod = Math.floor(canvasWidth / this._config.temperatures.length);\r\n        const x = thod * days;\r\n\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * 캔버스의 세로 축을 정확히 50등분하여 나란히 전개합니다.\r\n     * \r\n     * @param {Number} temperature \r\n     */    \r\n    getLinePositionY(temperature) {\r\n        const maxTemperature = this._config.maxTemperature;\r\n        const canvasHeight = this._canvas.height;\r\n        const thod = Math.floor(canvasHeight/maxTemperature);\r\n        const y = Math.floor(thod * (maxTemperature - temperature));\r\n\r\n        return y;\r\n    }\r\n\r\n    /**\r\n     * 기온 배열을 캔버스에 대한 벡터로 변환합니다.\r\n     * \r\n     * @param {Number[]} temperatures \r\n     * \r\n     * @return {Array<{x: 0, y: 0}>} lines \r\n     */    \r\n    getLines(temperatures) {\r\n        const lines = temperatures.map((temperature, day) => {\r\n            return {\r\n                x: this.getLinePositionX(day), \r\n                y: this.getLinePositionY(temperature)\r\n            };\r\n        });\r\n\r\n        return lines;\r\n    }\r\n\r\n    /**\r\n     * 무한 스크롤링을 위한 캔버스 이미지 패턴을 생성합니다.\r\n     * \r\n     * @param {{valid: Boolean, src: String}} pattern \r\n     */\r\n    drawChartPattern(pattern) {\r\n        return new Promise((resolve, reject) => {\r\n            if(!this._img) {\r\n                const img = new Image();\r\n                img.src = pattern.src;\r\n                img.onload = (ev) => {\r\n                    resolve(img);\r\n                    this._patternImageWidth = img.width;\r\n                };  \r\n                img.onerror = (err) => {\r\n                    reject(ev);\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 기온을 막대 차트 형식으로 그립니다.\r\n     * \r\n     * @param {Number[]} temperatures \r\n     * @param {Number} dt\r\n     */\r\n    drawLines(temperatures, dt) {\r\n\r\n        const ctx = this._canvas.getContext(\"2d\");\r\n        const {strokeStyle, lineWidth, font, \r\n            padding, textAlign, temperatureSymbol, \r\n            lineCap, smooth, fillChart, fillStyle, pattern, textColor} = this._config;\r\n\r\n        // 화면을 모두 지웁니다.\r\n        ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n\r\n        // 배경 이미지 스크롤링 구현\r\n        this._backgroundPositionX = (this._backgroundPositionX + 1) % this._patternImageWidth;\r\n\r\n        // 요일 별 기온을 백분율에 따라 라인화합니다.\r\n        const lines = this.getLines(temperatures);\r\n\r\n        ctx.save();\r\n        ctx.beginPath();\r\n\r\n        // 종횡비 보정\r\n        const aspectRatio = this._canvas.width / this._canvas.height;\r\n\r\n        // 이동 행렬을 통해 패딩 값을 설정합니다.\r\n        // 이 값은 캔버스의 가로 길이를 10등분한 값입니다.\r\n\r\n        ctx.setTransform(1, 0, 0, 1, this._canvas.width / padding, 0);\r\n\r\n        // 안티 앨리어싱을 설정합니다.\r\n        if(smooth) {\r\n            ctx.translate(0.5, 0.5);\r\n        }\r\n\r\n        // 라인을 연결합니다. \r\n        for (let i = 0; i < lines.length; i++) {\r\n            const cur = lines[i];\r\n            const prev = lines[i - 1];\r\n\r\n            // 차트를 색으로 채우지 않으려면 선 이동 처리를 해야 합니다.\r\n            if(!fillChart) {\r\n                if (prev) {\r\n                    ctx.moveTo(prev.x, prev.y);\r\n                } else {\r\n                    ctx.moveTo(cur.x, cur.y);\r\n                }\r\n            }\r\n\r\n            // \\u00B0는 각도 심볼입니다.\r\n            const text = temperatures[i] + temperatureSymbol;\r\n            const tw = ctx.measureText(text).width;\r\n            const pad = tw;\r\n            \r\n            // 라인의 각종 속성을 설정합니다.\r\n            ctx.lineWidth = lineWidth;\r\n            ctx.lineCap = lineCap;  \r\n            ctx.lineTo(cur.x, cur.y);        \r\n            \r\n            // 라인을 긋습니다.\r\n            ctx.stroke();\r\n\r\n            // 폰트를 설정합니다.\r\n            ctx.font = font;\r\n            ctx.textAlign = textAlign;\r\n\r\n            // tw는 텍스트의 폭이며 두 배를 하지 않을 경우, 첫 번째 텍스트의 폭이 축소됩니다.\r\n            ctx.lineWidth = lineWidth / 2;\r\n            ctx.strokeStyle = strokeStyle;            \r\n            ctx.strokeText(text, cur.x, (cur.y - pad), tw * 2);\r\n            ctx.fillStyle = textColor;\r\n            ctx.fillText(text, cur.x, (cur.y - pad), tw * 2); \r\n     \r\n        }\r\n\r\n        // 마지막 라인을 찾습니다.\r\n        const lastLine = [...lines].pop();\r\n\r\n        // 마지막 라인의 끝점으로부터 캔버스 하단까지 연결하여 도형을 완성합니다.\r\n        if(fillChart) {\r\n            \r\n            ctx.lineTo(lastLine.x, this._canvas.height);\r\n            ctx.lineTo(0, this._canvas.height);\r\n            ctx.closePath();   \r\n\r\n            // 이 값이 활성화되어있으면 스크롤링 패턴을 사용하여 반복 루프 효과를 구현합니다.\r\n            if(pattern.valid) {\r\n                ctx.translate(this._backgroundPositionX, 0);\r\n                ctx.fillStyle = this._fillPattern;\r\n            } else {\r\n                ctx.fillStyle = fillStyle;\r\n            }\r\n\r\n            ctx.fill();    \r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n}\r\n\r\nexport {\r\n    ChartComponent\r\n};","import {Component} from \"./Component.js\";\r\nimport App from \"./App.js\";\r\n\r\nclass WaterDrop extends Component {\r\n\r\n    constructor(config) {\r\n        super();\r\n        this._config = config;\r\n    }\r\n\r\n    /**\r\n     * 멤버 변수를 초기화합니다.\r\n     */\r\n    initMembers() {\r\n        super.initMembers();\r\n    }\r\n\r\n    /**\r\n     * 캔버스를 생성합니다.\r\n     */\r\n    start() {\r\n        this._canvas = $(\"<canvas />\", {width: 50, height: 25});\r\n        this._size = 50;\r\n\r\n        this.drawBackground(true, (1.0 - this._config.fillRate) || 1.0);\r\n        this.drawShape();\r\n\r\n        /**\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        const canvas = this._canvas.get(0);\r\n\r\n        this.emit(\"load\", canvas.toDataURL());        \r\n    }\r\n\r\n    /**\r\n     * 습도 이미지를 특정 색상으로 채웁니다.\r\n     * https://jsfiddle.net/e2fap608/\r\n     */\r\n    drawShape() {\r\n        /**\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        const canvas = this._canvas.get(0);\r\n        const ctx = canvas.getContext(\"2d\");\r\n        const w = this._size;\r\n\r\n        ctx.save();\r\n\r\n        ctx.globalCompositeOperation = \"source-over\";\r\n\r\n        ctx.setTransform(1, 0, 0, 1, canvas.width / 2, canvas.height / 2);\r\n        ctx.translate(0.5, 0.5);\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 - w, 0);\r\n\r\n        ctx.lineTo(0, 0 - (w));\r\n        ctx.lineTo(0 + w, 0);\r\n        ctx.arc(0, 0, w, 0, Math.PI);\r\n        ctx.lineWidth = 4;\r\n        ctx.closePath();\r\n\r\n        ctx.strokeStyle = \"#1F9FDE\";\r\n        ctx.stroke();\r\n\r\n        ctx.restore();           \r\n    }\r\n\r\n    /**\r\n     * 마스킹을 통해 습도 이미지를 fillRate 비율에 맞게 채웁니다.\r\n     * \r\n     * @param {Boolean}} fill \r\n     * @param {Number} rate 이 값은 0.0에서 1.0 사이의 실수입니다.\r\n     */\r\n    drawBackground(fill, rate) {\r\n        /**\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        const canvas = this._canvas.get(0);\r\n        const ctx = canvas.getContext(\"2d\");\r\n        const w = this._size;\r\n\r\n        ctx.save();\r\n\r\n        ctx.globalCompositeOperation = \"source-over\";\r\n\r\n        ctx.fillStyle = \"#1F9FDE\";\r\n        ctx.fillRect(0, Math.floor(canvas.height * rate), canvas.width, canvas.height);\r\n        ctx.fill();                \r\n\r\n        ctx.globalCompositeOperation = \"source-in\";\r\n\r\n        // 캔버스의 중심점을 중앙으로 옮깁니다.\r\n        ctx.setTransform(1, 0, 0, 1, canvas.width / 2, canvas.height / 2);\r\n\r\n        ctx.translate(0.5, 0.5);\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 - w, 0);\r\n        ctx.lineTo(0, 0 - (w - 2));\r\n        ctx.lineTo(0 + w, 0);\r\n        ctx.arc(0, 0, w, 0, Math.PI);\r\n        ctx.lineWidth = 10;\r\n        ctx.closePath();\r\n        ctx.fillStyle = \"#4798E6\";\r\n        ctx.fill();\r\n\r\n        ctx.restore();        \r\n    }\r\n}\r\n\r\nclass Arrow extends Component {\r\n\r\n    constructor(config) {\r\n        super();\r\n        this._config = config;\r\n    }\r\n\r\n    start() {\r\n        this._canvas = $(\"<canvas />\", {width: 50, height: 50});\r\n        this._size = 50;\r\n\r\n        this.drawArrow(this._config.fromX, this._config.fromY, this._config.deg);\r\n\r\n        /**\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        const canvas = this._canvas.get(0);\r\n\r\n        // 캔버스에 그려진 내용을 이미지로 내보냅니다.\r\n        this.emit(\"load\", canvas.toDataURL());   \r\n    }\r\n\r\n    drawArrow(fromX, fromY, deg) {\r\n        /**\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        const canvas = this._canvas.get(0);\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        if(fromX === 0) fromX = canvas.width / 2;\r\n        if(fromY === 0) fromY = canvas.height / 2;\r\n\r\n        let r = 0;\r\n        const toX = 50;\r\n        const toY = 50;\r\n\r\n        ctx.save();\r\n        ctx.setTransform(1, 0, 0, 1, canvas.width / 2, canvas.height / 2);\r\n        \r\n        ctx.lineWidth = 20;\r\n        ctx.fillStyle = \"#1E1E1E\";\r\n\r\n        ctx.beginPath();        \r\n        r += Math.PI / 180.0 * 15;\r\n        ctx.moveTo(fromX, fromY);\r\n        ctx.lineTo(Math.cos(r) * toX, Math.sin(r) * toY);\r\n\r\n        r += Math.PI / 180.0 * 45;\r\n        ctx.lineTo(Math.cos(r) * toX, Math.sin(r) * toY);    \r\n\r\n        r += Math.PI / 180.0 * 45;\r\n        ctx.moveTo(fromX, fromY);\r\n        ctx.lineTo(Math.cos(r) * toX, Math.sin(r) * toY);            \r\n        ctx.fill();\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n\r\n}\r\n\r\nexport {WaterDrop, Arrow};","import {Component} from \"./Component.js\";\r\nimport App from \"./App.js\";\r\nimport {WaterDrop, Arrow} from \"./DynamicImage.js\";\r\n\r\nclass WeatherComponent extends Component {\r\n    constructor(app) {\r\n        super(app);\r\n    }\r\n\r\n    start() {\r\n        this.on(\"ready\", (config) => {\r\n\r\n            this._config = config;\r\n\r\n            this.initWithDate();\r\n            this.initWithWeather();\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @param {Number} unixTime \r\n     */\r\n    getTimeString(unixTime) {\r\n        const options = {\"weekday\": \"long\", \"month\": 'long', \"day\": 'numeric'};        \r\n        const date = new Date(unixTime * 1000);\r\n\r\n        return new Intl.DateTimeFormat(\"ko-KR\", options).format(date);\r\n    }\r\n\r\n    /**\r\n     * 절대 온도(K)에서 섭씨로 변환합니다.\r\n     */\r\n    getDegreeCelsius(k) {\r\n        const c = Math.round(k - 273.15, 2);\r\n\r\n        return c;\r\n    }\r\n\r\n    getFahrenheit(k) {\r\n        const c = this.getDegreeCelsius(k);\r\n        return (c - 32) * 0.5555555555555556;\r\n    }\r\n\r\n    /**\r\n     * 향후 5일간의 날짜를 표기합니다.\r\n     */\r\n    initWithDate() {\r\n        const {daily} = this._config;\r\n\r\n        const days = [];\r\n        const maxDays = 5;\r\n        for(let i = 0; i < maxDays; i++) {\r\n            days.push(daily[i].dt);\r\n        }\r\n\r\n        $(\".city-field div\").text(`${this._config.timezone}`)\r\n                            .append(`<a href=\"https://github.com/biud436/biud436.github.com/tree/master/weather\"><img src=\"./images/GitHub-Mark-Light-32px.png\"></a>`);\r\n\r\n        $(\"article\").each((index, elem) => {\r\n            $(elem)\r\n                .text(\"\")\r\n                .append(`<p>${this.getTimeString(days[index])}</p>`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 풍향 값에 따른 16방위 변환식\r\n     * @param {Number} deg \r\n     */\r\n    getWindDirection(deg) {\r\n        const cardinalDir = Math.floor((deg + 22.5 * 0.5 ) / 22.5);\r\n        const data = {\r\n            0: \"북\",\r\n            1: \"북북동\",\r\n            2: \"북동\",\r\n            3: \"동북동\",\r\n            4: \"동\",\r\n            5: \"동남동\",\r\n            6: \"남동\",\r\n            7: \"남남동\",\r\n            8: \"남\",\r\n            9: \"남남서\",\r\n            10: \"남서\",\r\n            11: \"서남서\",\r\n            12: \"서\",\r\n            13: \"서북서\",\r\n            14: \"북서\",\r\n            15: \"북북서\",\r\n            16: \"북\"\r\n        };\r\n\r\n        const windDir = data[cardinalDir];\r\n\r\n        return windDir;\r\n    }\r\n\r\n    /**\r\n     * 날씨 이미지를 불러옵니다.\r\n     */\r\n    initWithWeather() {\r\n        $(\"article\").each((index, elem) => {\r\n            const weatherImg = $(\"<div />\", {class: \"article__weather-image\"});\r\n            const {daily} = this._config;\r\n            const data = daily[index];\r\n            const weather = data.weather;\r\n\r\n            let size = $(window).width() > 768 ? \"@4x\": \"@2x\";\r\n            \r\n            if($(window).width() < 480) {\r\n                size = \"\";\r\n            }\r\n\r\n            const img = $(`<img src=\"https://openweathermap.org/img/wn/${weather[0].icon}${size}.png\">`);\r\n            $(elem).append(img);\r\n            \r\n            this.initWithWindSpeed(index);\r\n        });        \r\n    }\r\n\r\n    /**\r\n     * 풍속 데이터를 표기합니다.\r\n     */\r\n    initWithWindSpeed(index) {\r\n        const {daily} = this._config;\r\n        const data = daily[index];\r\n\r\n        const windDegText = $(\"<p></p>\", {class: \"article__weather-wind-deg\"})\r\n            .html(`<span>풍향</span> ${this.getWindDirection(data.wind_deg)}`)\r\n\r\n        const windSpeed = $(\"<p></p>\", {class: \"article__weather-wind-speed\"})\r\n            .html(`<span>풍속</span> ${Math.round(data.wind_speed / 1.944)}m/s`)\r\n\r\n        const humidity = $(\"<div></div>\", {class: \"article__weather-humidity\"})\r\n            .html(`<span>습도</span> ${data.humidity}%`)\r\n\r\n        const min = $(\"<p></p>\", {class: \"article__weather-temp-min\"})\r\n            .html(`<span>최저 기온</span> ${this.getDegreeCelsius(data.temp.min)}°C`);\r\n\r\n        const max = $(\"<p></p>\", {class: \"article__weather-temp-max\"})\r\n            .html(`<span>최고 기온</span> ${this.getDegreeCelsius(data.temp.max)}°C`)\r\n\r\n        const time = $(\"<p></p>\", {class: \"article__weather-sunrize\"})\r\n            .html(`<span>일출 시간</span> ${new Date(data.sunrise * 1000).toLocaleTimeString()}`);\r\n\r\n        $(\"article img\").eq(index)\r\n            .after(windDegText, windSpeed, humidity, min, max, time);\r\n\r\n        $(`<p>${this.getDegreeCelsius(data.temp.day)}°C</p>`)\r\n            .addClass(\"temperature-text\")\r\n            .appendTo($(\"article\").eq(index))\r\n\r\n        try {\r\n            // 습도 이미지를 동적으로 직접 그려냅니다.\r\n            const waterDrop = new WaterDrop({fillRate: data.humidity * 0.01});\r\n            waterDrop.on(\"load\", src => {\r\n                const img = new Image(50, 50);\r\n                img.src = src;\r\n                img.classList.add(\"fill-water-drop\");\r\n                img.title = `습도 ${data.humidity}%`;\r\n                img.onload = () => {\r\n                    $(\"article\").eq(index).find(\".article__weather-wind-deg\").append(img);\r\n                }\r\n            });                \r\n            waterDrop.start();   \r\n\r\n            $(`<i class=\"fas fa-arrow-up\"></i>`)\r\n                .css(\"transform\", `rotate(${data.wind_deg}deg)`)\r\n                .appendTo(windDegText);\r\n\r\n        } catch(e) {\r\n            console.warn(e);\r\n        }\r\n               \r\n    }\r\n}\r\n\r\nexport {WeatherComponent};","const config = {\r\n    API_KEY: window.atob(\"WWIxblBHVEFoa2xjJTJCMUJ6JTJGN2VqZ2JDR2QyZ25DdDhoR3I4UmhrdWJGbUNGQ0ZEUUtMQUhkUGMlMkJMdmRPWnJSYzlJUzlEN2syMHZ2TG9jVW9EaVRhYlElM0QlM0Q=\"),\r\n    END_POINT_URL: window.atob(`aHR0cDovL2FwaXMuZGF0YS5nby5rci8xMzYwMDAwL1ZpbGFnZUZjc3RJbmZvU2VydmljZS9nZXRWaWxhZ2VGY3N0`),\r\n};\r\n\r\nexport {config};","import {config} from \"./config.js\";\r\nimport {Component} from \"./Component.js\";\r\n\r\nclass JsonLoader extends Component {\r\n    constructor(url) {\r\n        super();\r\n\r\n        this._url = url;\r\n        this.emit(\"added\");\r\n    }\r\n\r\n    start() {\r\n        const END_POINT_URL = this._url;\r\n\r\n        $.ajax({\r\n            url: END_POINT_URL,\r\n            dataType: \"json\",\r\n            success: data => {\r\n                // 로드가 완료되면 등록된 로드 콜백 함수를 호출합니다.\r\n                this.emit(\"load\", data);\r\n            },\r\n            error: err => {\r\n                // 로드에 실패하면 등록된 오류 콜백 함수를 호출합니다.\r\n                this.emit(\"error\", err);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport {JsonLoader};","import App from \"./App.js\";\r\n\r\nconst entryPoint = new App();\r\n\r\nObject.assign(window, {\r\n    app: entryPoint\r\n});\r\n\r\nfunction startMainLoop(dt) {\r\n    entryPoint.emit(\"update\", dt);\r\n    window.requestAnimationFrame(startMainLoop);\r\n}\r\n\r\nentryPoint.start();\r\nstartMainLoop();","import { EventEmitter } from \"./EventEmitter.js\";\r\nimport {Component} from \"./Component.js\";\r\nimport {ChartComponent} from \"./ChartComponent.js\";\r\nimport {WeatherComponent} from \"./WeatherComponent.js\";\r\nimport { JsonLoader } from \"./JsonLoader.js\";\r\n\r\n/**\r\n * @link https://openweathermap.org/api/one-call-api\r\n */\r\nexport default class App extends EventEmitter {\r\n    constructor() {\r\n        super();\r\n    }   \r\n\r\n    start() {\r\n        // 로딩바를 표시합니다.\r\n        $(\"#loading, #darken\").show();\r\n\r\n        // 날씨 데이터를 가져와 화면을\r\n        this.initWithArticle();\r\n    }\r\n\r\n    /**\r\n     * 차트 그래프를 생성합니다.\r\n     * @param {Number[]}} temperatures \r\n     */\r\n    initWithCharts(temperatures) {\r\n        this._chart = new ChartComponent(this);\r\n        this._chart.emit(\"ready\", {\r\n            strokeStyle: \"#489AED\",\r\n            lineWidth: 8, // 차트 그래프의 선 굵기를 지정합니다.\r\n            font: \"1em Arial\", // 폰트를 설정합니다.\r\n            padding: 10, // 캔버스의 폭을 10등분한 값입니다.\r\n            textAlign: \"center\",\r\n            lineCap: \"round\",\r\n            temperatureSymbol: \"\\u00B0\",\r\n            smooth: true, // 차트의 계산 현상을 없애고 부드럽게 만듭니다.\r\n            fillChart: true, // 차트를 채울 지 결정합니다.\r\n            pattern: { \r\n                valid: true, // 차트 배경에 이미지를 지정합니다.\r\n                src: './images/background2.webp'\r\n            },\r\n            fillStyle: \"rgb(255, 0, 0, 0.5)\",\r\n            textColor: \"white\", // 차트의 텍스트 색상을 지정합니다.\r\n            temperatures: temperatures,\r\n            maxTemperature: 50, // 차트의 최고 기온을 설정합니다 (이 값을 이용하여 비율을 만듭니다.)\r\n        });\r\n    }\r\n\r\n    initWithArticle() {\r\n        this._weatherComponent = new WeatherComponent();\r\n        this._weatherComponent.emit(\"added\");        \r\n\r\n        // 서울의 위도와 경도를 지정합니다.\r\n        const lat = 37.532600;\r\n        const lon = 127.024612;\r\n        const API = window.atob(`ZjVmOTYzOTAxYmM3YTdkZjU2YjczMzIzY2EwMGFlNDc=`);\r\n        const lang = navigator.language.slice(3).toLowerCase();\r\n        const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=${API}&lang=${lang}`;\r\n\r\n        // JSON 파일을 로드합니다.\r\n        const loader = new JsonLoader(url);\r\n        loader.on(\"load\", data => {\r\n            this._weatherComponent.emit(\"ready\", data);  \r\n\r\n            const temperatures = [];\r\n            const {daily} = data;\r\n            \r\n            // 기온 값을 가져와서 배열에 추가합니다.\r\n            for(let i = 0; i < 5; i++) {\r\n                temperatures.push(this._weatherComponent.getDegreeCelsius(daily[i].temp.day));\r\n            }\r\n\r\n            // 차트 그래프를 생성합니다.\r\n            this.initWithCharts(temperatures);\r\n\r\n            // 프레임 업데이트 함수를 이벤트에 등록합니다.\r\n            this.on(\"update\", (dt) => this.update(dt));                \r\n\r\n            // 로딩바를 숨깁니다.\r\n            $(\"#loading, #darken\").hide();\r\n\r\n        });\r\n        // JSON 파일 로딩 중에 에러가 발생하였을 경우, 디버깅 용도로 에러를 표시합니다.\r\n        loader.on(\"error\", err => {\r\n            console.log(\"error\");\r\n            console.warn(err);\r\n        });        \r\n\r\n    }\r\n\r\n    update(dt) {\r\n        // 차트를 매 프레임마다 업데이트 합니다.\r\n        // 이 메서드는 프레임 업데이트를 통해 이미지를 오른쪽으로 무한 스크롤링하기 위해 존재합니다.\r\n        this._chart.emit(\"update\", dt);\r\n    }\r\n};\r\n\r\n"],"sourceRoot":""}